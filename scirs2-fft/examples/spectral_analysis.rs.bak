//! Spectral Analysis Example
//!
//! This example demonstrates how to perform various spectral analysis tasks
//! using the scirs2-fft library.

use ndarray::{s, Array3};
use rand::Rng;
use scirs2_fft::{
    apply_colormap, fft, rfft, rfftfreq, spectrogram,
    spectrogram_normalized, waterfall_3d,
    window::{get_window, Window},
};
use std::f64::consts::PI;

fn main() {
    println!("=== Spectral Analysis Examples ===\n");

    // Example 1: Power Spectral Density (PSD) Estimation
    power_spectral_density_example();

    // Other examples are temporarily disabled to simplify build
    println!("\nNOTE: Other examples are temporarily disabled to simplify the build.");
    
    // Example 2: Spectral Leakage and Windowing
    // spectral_leakage_windowing();

    // Example 3: Noise Level Estimation
    // noise_level_estimation();

    // Example 4: Signal Detection in Noise
    // signal_detection_in_noise();

    // Example 5: Frequency Resolution and Zero Padding
    // frequency_resolution();

    // Example 6: Time-Frequency Analysis with Spectrograms
    // time_frequency_analysis();

    // Example 7: Waterfall Plots for 3D Visualization
    // waterfall_plot_example();

    println!("\nSpectral analysis examples completed!");
}

/// Power Spectral Density (PSD) Estimation
fn power_spectral_density_example() {
    println!("\n--- Power Spectral Density Estimation ---");

    // Create a signal with multiple frequency components
    let n = 1024;
    let fs = 1000.0; // 1000 Hz sampling rate
    let dt = 1.0 / fs;

    // Signal components
    let frequencies = [50.0, 120.0, 240.0]; // Hz
    let amplitudes = [1.0, 0.5, 0.25]; // Amplitudes

    // Generate time domain signal
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();
    let mut signal = vec![0.0; n];

    for i in 0..n {
        for (&freq, &amp) in frequencies.iter().zip(amplitudes.iter()) {
            signal[i] += amp * (2.0 * PI * freq * t[i]).sin();
        }
    }

    // Apply Hann window to reduce spectral leakage
    let window = get_window(Window::Hann, n, true).unwrap();
    let windowed_signal: Vec<f64> = signal
        .iter()
        .zip(window.iter())
        .map(|(&s, &w)| s * w)
        .collect();

    // Compute FFT
    let spectrum = rfft(&windowed_signal, None).unwrap();

    // Calculate PSD
    // Scale factor accounts for window energy and normalizes to physical units
    let window_scale = window.iter().map(|&x| x * x).sum::<f64>() / n as f64;
    let scale = 2.0 / (fs * window_scale); // 2x for single-sided spectrum, divide by fs for Hz

    let psd: Vec<f64> = spectrum.iter().map(|c| c.norm_sqr() * scale).collect();

    // Create frequency axis
    let freqs = rfftfreq(n, dt);

    println!("PSD Calculation:");
    println!("  Signal length: {} samples", n);
    println!("  Frequency resolution: {:.3} Hz", fs / n as f64);
    println!("  Nyquist frequency: {:.1} Hz", fs / 2.0);

    // Get frequency axis
    let freqs_vec = freqs.unwrap();
    
    // Find peaks in the PSD
    let mut peaks = Vec::new();
    for i in 1..psd.len() - 1 {
        if psd[i] > psd[i - 1]
            && psd[i] > psd[i + 1]
            && psd[i] > 0.01 * psd.iter().cloned().fold(0.0f64, f64::max)
        {
            peaks.push((freqs_vec[i], psd[i].sqrt(), i));
        }
    }

    // Sort by power (descending)
    peaks.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());

    println!("\nDetected frequency components:");
    for (i, &(freq, amp, _)) in peaks.iter().take(frequencies.len()).enumerate() {
        println!(
            "  Component {}: {:.1} Hz, amplitude: {:.3}",
            i + 1,
            freq,
            amp
        );
    }
}

/// Spectral Leakage and Windowing Effects
fn spectral_leakage_windowing() {
    println!("\n--- Spectral Leakage and Windowing ---");

    // Create two signals:
    // 1. A perfectly periodic signal (integer cycles)
    // 2. A non-periodic signal (non-integer cycles)
    let n = 512;
    let fs = 1000.0;
    let dt = 1.0 / fs;

    // Signal frequencies
    let periodic_freq = 125.0; // Exactly 64 cycles in 512 samples
    let non_periodic_freq = 126.3; // Not an integer number of cycles

    // Generate signals
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();
    let periodic_signal: Vec<f64> = t
        .iter()
        .map(|&ti| (2.0 * PI * periodic_freq * ti).sin())
        .collect();
    let non_periodic_signal: Vec<f64> = t
        .iter()
        .map(|&ti| (2.0 * PI * non_periodic_freq * ti).sin())
        .collect();

    // Define window functions to test
    let windows = [
        ("Rectangular (no window)", Window::Rectangular),
        ("Hann", Window::Hann),
        ("Hamming", Window::Hamming),
        ("Blackman", Window::Blackman),
        ("Blackman-Harris", Window::BlackmanHarris),
    ];

    println!("Comparing window functions for spectral analysis:");

    for &(name, window_type) in &windows {
        println!("\n  {}", name);

        // Get window function
        let window = get_window(window_type, n, true).unwrap();

        // Apply window to both signals
        let windowed_periodic: Vec<f64> = periodic_signal
            .iter()
            .zip(window.iter())
            .map(|(&s, &w)| s * w)
            .collect();

        let windowed_non_periodic: Vec<f64> = non_periodic_signal
            .iter()
            .zip(window.iter())
            .map(|(&s, &w)| s * w)
            .collect();

        // Compute spectra
        let spectrum_periodic = rfft(&windowed_periodic, None).unwrap();
        let spectrum_non_periodic = rfft(&windowed_non_periodic, None).unwrap();

        // Convert to magnitude spectrum (normalized)
        let mag_periodic: Vec<f64> = spectrum_periodic
            .iter()
            .map(|c| c.norm() / (n as f64 / 2.0))
            .collect();

        let mag_non_periodic: Vec<f64> = spectrum_non_periodic
            .iter()
            .map(|c| c.norm() / (n as f64 / 2.0))
            .collect();

        // Measure spectral leakage by calculating energy in non-peak bins
        // First find the peak bin
        let peak_bin_periodic = mag_periodic
            .iter()
            .enumerate()
            .max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap())
            .map(|(i, _)| i)
            .unwrap();

        let peak_bin_non_periodic = mag_non_periodic
            .iter()
            .enumerate()
            .max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap())
            .map(|(i, _)| i)
            .unwrap();

        // Calculate mainlobe width (3 dB width)
        let find_3db_width = |spectrum: &[f64], peak_bin: usize| -> usize {
            let peak_value = spectrum[peak_bin];
            let threshold = peak_value / (2.0_f64).sqrt(); // -3 dB

            // Find points where spectrum crosses threshold
            let mut left_bin = peak_bin;
            let mut right_bin = peak_bin;

            // Find left crossing
            for i in (1..peak_bin).rev() {
                if spectrum[i] < threshold {
                    left_bin = i + 1;
                    break;
                }
            }

            // Find right crossing
            for i in peak_bin + 1..spectrum.len() {
                if spectrum[i] < threshold {
                    right_bin = i - 1;
                    break;
                }
            }

            right_bin - left_bin + 1
        };

        let mainlobe_width_periodic = find_3db_width(&mag_periodic, peak_bin_periodic);
        let mainlobe_width_non_periodic = find_3db_width(&mag_non_periodic, peak_bin_non_periodic);

        // Calculate spectral leakage (ratio of energy outside mainlobe)
        let calc_leakage = |spectrum: &[f64], peak_bin: usize, width: usize| -> f64 {
            let half_width = width / 2;
            let mainlobe_start = peak_bin.saturating_sub(half_width);
            let mainlobe_end = (peak_bin + half_width).min(spectrum.len() - 1);

            let total_energy: f64 = spectrum.iter().map(|&x| x * x).sum();
            let mainlobe_energy: f64 = spectrum[mainlobe_start..=mainlobe_end]
                .iter()
                .map(|&x| x * x)
                .sum();

            (total_energy - mainlobe_energy) / total_energy
        };

        let leakage_periodic =
            calc_leakage(&mag_periodic, peak_bin_periodic, mainlobe_width_periodic);
        let leakage_non_periodic = calc_leakage(
            &mag_non_periodic,
            peak_bin_non_periodic,
            mainlobe_width_non_periodic,
        );

        println!("    Periodic signal:");
        println!(
            "      Peak frequency: {:.1} Hz",
            rfftfreq(n, dt)[peak_bin_periodic]
        );
        println!("      Mainlobe width: {} bins", mainlobe_width_periodic);
        println!("      Spectral leakage: {:.1}%", leakage_periodic * 100.0);

        println!("    Non-periodic signal:");
        println!(
            "      Peak frequency: {:.1} Hz",
            rfftfreq(n, dt)[peak_bin_non_periodic]
        );
        println!("      Mainlobe width: {} bins", mainlobe_width_non_periodic);
        println!(
            "      Spectral leakage: {:.1}%",
            leakage_non_periodic * 100.0
        );
    }

    println!("\nKey observations:");
    println!("  - Rectangular window has the narrowest mainlobe (best frequency resolution)");
    println!("  - But it has the highest spectral leakage for non-periodic signals");
    println!("  - Blackman and Blackman-Harris have the lowest leakage");
    println!("  - Window choice is a trade-off between resolution and leakage suppression");
}

/// Noise Level Estimation from Spectrum
fn noise_level_estimation() {
    println!("\n--- Noise Level Estimation ---");

    // Create a signal with a tone plus different noise levels
    let n = 1024;
    let fs = 1000.0;
    let dt = 1.0 / fs;

    // Signal parameters
    let signal_freq = 200.0; // Hz
    let signal_amp = 1.0;

    // Different noise levels to test
    let noise_stds = [0.1, 0.3, 0.5];

    // Generate time domain signal
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();

    // Create random number generator
    let mut rng = rand::thread_rng();

    println!("Estimating noise levels from spectrum:");

    for &noise_std in &noise_stds {
        // Create signal with noise
        let mut signal = vec![0.0; n];
        for i in 0..n {
            // Pure tone
            signal[i] = signal_amp * (2.0 * PI * signal_freq * t[i]).sin();
            // Add Gaussian noise
            signal[i] += noise_std * rng.gen::<f64>() * 2.0 - 1.0;
        }

        // Apply window
        let window = get_window(Window::Hann, n, true).unwrap();
        let windowed_signal: Vec<f64> = signal
            .iter()
            .zip(window.iter())
            .map(|(&s, &w)| s * w)
            .collect();

        // Compute FFT
        let spectrum = rfft(&windowed_signal, None).unwrap();

        // Convert to power spectrum
        let power_spectrum: Vec<f64> = spectrum.iter().map(|c| c.norm_sqr() / (n as f64)).collect();

        // Generate frequency axis
        let freqs = rfftfreq(n, dt);

        // Find the signal peak
        let peak_idx = power_spectrum
            .iter()
            .enumerate()
            .max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap())
            .map(|(i, _)| i)
            .unwrap();

        // Calculate noise floor by averaging power in frequency bands away from the peak
        // Avoid DC and very high frequencies where there might be aliasing

        // Define exclusion region around peak (±20 Hz)
        let peak_freq = freqs[peak_idx];
        let exclusion_width = 20.0; // Hz

        // Calculate median noise level (more robust than mean)
        let mut noise_values = Vec::new();
        for (i, &freq) in freqs.iter().enumerate() {
            // Skip frequencies within exclusion zone
            if (freq - peak_freq).abs() < exclusion_width || freq < 10.0 || freq > fs / 2.0 - 10.0 {
                continue;
            }
            noise_values.push(power_spectrum[i]);
        }

        // Sort and find median
        noise_values.sort_by(|a, b| a.partial_cmp(b).unwrap());
        let median_noise = if noise_values.is_empty() {
            0.0
        } else {
            noise_values[noise_values.len() / 2]
        };

        // Calculate signal-to-noise ratio
        let peak_power = power_spectrum[peak_idx];
        let snr_db = 10.0 * (peak_power / median_noise).log10();

        // Convert noise to standard deviation in time domain
        let estimated_noise_std = (median_noise * n as f64).sqrt();

        println!("\n  Input noise level: {:.2}", noise_std);
        println!("  Estimated noise floor: {:.6}", median_noise);
        println!("  Estimated noise std: {:.2}", estimated_noise_std);
        println!("  Signal-to-noise ratio: {:.1} dB", snr_db);
        println!(
            "  Peak frequency: {:.1} Hz (expected: {})",
            freqs[peak_idx], signal_freq
        );
    }
}

/// Signal Detection in Noise
fn signal_detection_in_noise() {
    println!("\n--- Signal Detection in Noise ---");

    // Parameters
    let n = 2048;
    let fs = 1000.0;
    let dt = 1.0 / fs;

    // Signal definition
    let signal_freqs = [150.0, 320.0, 410.0]; // Hz
    let signal_amps = [1.0, 0.6, 0.4]; // Amplitudes

    // Noise level
    let noise_level = 0.8;

    // Generate time domain signal with noise
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();
    let mut signal = vec![0.0; n];
    let mut clean_signal = vec![0.0; n];

    // Create random number generator
    let mut rng = rand::thread_rng();

    // Generate signal
    for i in 0..n {
        for (&freq, &amp) in signal_freqs.iter().zip(signal_amps.iter()) {
            let component = amp * (2.0 * PI * freq * t[i]).sin();
            clean_signal[i] += component;
            signal[i] += component;
        }
        // Add noise
        signal[i] += noise_level * (2.0 * rng.gen::<f64>() - 1.0);
    }

    println!("Signal detection using spectral analysis:");
    println!("  Signal length: {} samples", n);
    println!("  Noise level: {:.1}", noise_level);
    println!(
        "  Signal components: {:.1}, {:.1}, {:.1} Hz",
        signal_freqs[0], signal_freqs[1], signal_freqs[2]
    );

    // Calculate spectrum with Welch's method for better noise reduction
    // (Divide signal into overlapping segments, window each segment, average spectra)
    let segment_length = 512;
    let overlap = 256;
    let num_segments = (n - segment_length) / (segment_length - overlap) + 1;

    println!("\nPerforming Welch's method with {} segments", num_segments);

    // Apply window to each segment and accumulate spectrum
    let window = get_window(Window::Hann, segment_length, None).unwrap();
    let mut accumulated_power = vec![0.0; segment_length / 2 + 1];

    for i in 0..num_segments {
        let start = i * (segment_length - overlap);
        let segment = &signal[start..start + segment_length];

        // Apply window
        let windowed_segment: Vec<f64> = segment
            .iter()
            .zip(window.iter())
            .map(|(&s, &w)| s * w)
            .collect();

        // Compute FFT
        let spectrum = rfft(&windowed_segment, None).unwrap();

        // Convert to power spectrum and accumulate
        for (j, &val) in spectrum.iter().enumerate() {
            accumulated_power[j] += val.norm_sqr() / (segment_length as f64);
        }
    }

    // Normalize by number of segments
    for i in 0..accumulated_power.len() {
        accumulated_power[i] /= num_segments as f64;
    }

    // Create frequency axis
    let freqs = rfftfreq(segment_length, dt);

    // Detect peaks
    let mut peaks = Vec::new();
    for i in 2..accumulated_power.len() - 2 {
        if accumulated_power[i] > accumulated_power[i - 1]
            && accumulated_power[i] > accumulated_power[i - 2]
            && accumulated_power[i] > accumulated_power[i + 1]
            && accumulated_power[i] > accumulated_power[i + 2]
        {
            peaks.push((freqs[i], accumulated_power[i], i));
        }
    }

    // Sort peaks by power (descending)
    peaks.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());

    // Estimate noise floor (similar to previous example)
    let mut noise_values = Vec::new();
    for &power in &accumulated_power {
        noise_values.push(power);
    }

    noise_values.sort_by(|a, b| a.partial_cmp(b).unwrap());
    let noise_floor = if noise_values.is_empty() {
        0.0
    } else {
        noise_values[noise_values.len() / 2]
    };

    println!("  Estimated noise floor: {:.6}", noise_floor);

    // Detect signals with peak/noise > 10 (10 dB SNR)
    println!("\nDetected frequency components:");
    for (i, &(freq, power, _)) in peaks.iter().enumerate() {
        let snr = power / noise_floor;
        if snr > 10.0 {
            println!(
                "  Peak {}: {:.1} Hz, power: {:.4}, SNR: {:.1} dB",
                i + 1,
                freq,
                power,
                10.0 * snr.log10()
            );
        }
    }

    // Compare with true signal frequencies
    println!("\nTrue frequencies vs detected:");
    for (i, &true_freq) in signal_freqs.iter().enumerate() {
        let detected = peaks
            .iter()
            .take(3)
            .find(|&&(f, _, _)| (f - true_freq).abs() < 5.0)
            .map(|&(f, _, _)| f)
            .unwrap_or(0.0);

        if detected > 0.0 {
            println!(
                "  Component {}: {:.1} Hz (detected at {:.1} Hz)",
                i + 1,
                true_freq,
                detected
            );
        } else {
            println!("  Component {}: {:.1} Hz (not detected)", i + 1, true_freq);
        }
    }
}

/// Frequency Resolution and Zero Padding
fn frequency_resolution() {
    println!("\n--- Frequency Resolution and Zero Padding ---");

    // Parameters
    let n = 512;
    let fs = 1000.0;
    let dt = 1.0 / fs;

    // Create two closely spaced tones
    let f1 = 200.0; // Hz
    let f2 = 208.0; // Hz - close to f1

    // Generate time domain signal
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();
    let signal: Vec<f64> = t
        .iter()
        .map(|&ti| (2.0 * PI * f1 * ti).sin() + (2.0 * PI * f2 * ti).sin())
        .collect();

    println!("Analyzing two closely spaced tones:");
    println!("  Tone 1: {:.1} Hz", f1);
    println!("  Tone 2: {:.1} Hz", f2);
    println!("  Difference: {:.1} Hz", (f2 - f1).abs());

    // Base frequency resolution
    let base_resolution = fs / n as f64;
    println!("  Base frequency resolution: {:.2} Hz", base_resolution);

    // Standard FFT without padding
    let window = get_window(Window::Hann, n, None).unwrap();
    let windowed_signal: Vec<f64> = signal
        .iter()
        .zip(window.iter())
        .map(|(&s, &w)| s * w)
        .collect();

    let spectrum = rfft(&windowed_signal, None).unwrap();
    let power_spectrum: Vec<f64> = spectrum.iter().map(|c| c.norm_sqr() / n as f64).collect();

    // Create frequency axis
    let freqs = rfftfreq(n, dt);

    // Find peaks
    let mut peaks = Vec::new();
    for i in 1..power_spectrum.len() - 1 {
        if power_spectrum[i] > power_spectrum[i - 1] && power_spectrum[i] > power_spectrum[i + 1] {
            peaks.push((freqs[i], power_spectrum[i], i));
        }
    }

    // Sort by frequency
    peaks.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());

    println!("\n  Standard FFT (no padding):");

    // Check if we can resolve both peaks
    let resolved = peaks.len() >= 2 && (peaks[1].0 - peaks[0].0).abs() > 0.0;

    if resolved {
        println!(
            "    Detected frequencies: {:.1} Hz and {:.1} Hz",
            peaks[0].0, peaks[1].0
        );
        println!("    Resolution: {:.1} Hz", (peaks[1].0 - peaks[0].0).abs());
    } else {
        println!("    Could not resolve both frequencies!");
        println!("    Detected peaks: {}", peaks.len());

        if peaks.len() > 0 {
            println!("    First peak: {:.1} Hz", peaks[0].0);
        }
    }

    // Try different zero-padding factors
    let pad_factors = [2, 4, 8];

    for &factor in &pad_factors {
        let padded_n = n * factor;

        // FFT with zero padding
        let spectrum_padded = rfft(&windowed_signal, Some(padded_n)).unwrap();
        let power_spectrum_padded: Vec<f64> = spectrum_padded.iter()
            .map(|c| c.norm_sqr() / n as f64) // Use original length for power normalization
            .collect();

        // Create frequency axis for padded spectrum
        let freqs_padded = rfftfreq(padded_n, dt);

        // Find peaks in padded spectrum
        let mut peaks_padded = Vec::new();
        for i in 1..power_spectrum_padded.len() - 1 {
            if power_spectrum_padded[i] > power_spectrum_padded[i - 1]
                && power_spectrum_padded[i] > power_spectrum_padded[i + 1]
            {
                peaks_padded.push((freqs_padded[i], power_spectrum_padded[i], i));
            }
        }

        // Sort by frequency
        peaks_padded.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());

        // Look for peaks close to expected frequencies
        let mut detected_f1 = None;
        let mut detected_f2 = None;

        for &(freq, _, _) in &peaks_padded {
            if (freq - f1).abs() < 10.0 && detected_f1.is_none() {
                detected_f1 = Some(freq);
            } else if (freq - f2).abs() < 10.0 && detected_f2.is_none() {
                detected_f2 = Some(freq);
            }
        }

        println!("\n  Zero padding ({}x):", factor);
        println!("    Frequency resolution: {:.2} Hz", fs / padded_n as f64);

        match (detected_f1, detected_f2) {
            (Some(freq1), Some(freq2)) => {
                println!(
                    "    Detected frequencies: {:.1} Hz and {:.1} Hz",
                    freq1, freq2
                );
                println!("    Resolution: {:.1} Hz", (freq2 - freq1).abs());
                println!("    Resolved: Yes");
            }
            _ => {
                println!("    Could not resolve both frequencies!");
                if let Some(f) = detected_f1 {
                    println!("    Detected f1 at: {:.1} Hz", f);
                }
                if let Some(f) = detected_f2 {
                    println!("    Detected f2 at: {:.1} Hz", f);
                }
            }
        }
    }

    println!("\nKey observations:");
    println!("  - Frequency resolution = sampling rate / FFT length");
    println!("  - Zero padding increases frequency interpolation (not true resolution)");
    println!("  - Windowing affects peak width and detectability");
    println!("  - Only longer time records can truly improve frequency resolution");
}

/// Time-Frequency Analysis with Spectrograms
fn time_frequency_analysis() {
    println!("\n--- Time-Frequency Analysis ---");

    // Create a signal with time-varying frequency (chirp + tone + noise)
    let n = 5000;
    let fs = 1000.0; // 1000 Hz sampling rate
    let dt = 1.0 / fs;

    // Generate time axis
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();

    // Signal components:
    // 1. Linear chirp from 50 Hz to
    // 350 Hz
    // 2. Constant tone at 200 Hz from t=2s to t=4s
    // 3. Short pulse at t=3s
    // 4. Background noise

    let mut signal = vec![0.0; n];
    let mut rng = rand::thread_rng();

    // Linear chirp
    let chirp_start_freq = 50.0;
    let chirp_end_freq = 350.0;
    let chirp_rate = (chirp_end_freq - chirp_start_freq) / t[n - 1];

    for i in 0..n {
        // Chirp component
        let inst_freq = chirp_start_freq + chirp_rate * t[i];
        signal[i] += (2.0 * PI * inst_freq * t[i]).sin();

        // Tone component (only from t=2s to t=4s)
        if t[i] >= 2.0 && t[i] <= 4.0 {
            signal[i] += 0.8 * (2.0 * PI * 200.0 * t[i]).sin();
        }

        // Short pulse at t=3s
        if t[i] >= 3.0 && t[i] <= 3.1 {
            signal[i] += 1.5 * (2.0 * PI * 300.0 * t[i]).sin();
        }

        // Background noise
        signal[i] += 0.2 * (2.0 * rng.gen::<f64>() - 1.0);
    }

    println!("Analyzing a complex signal with time-varying components:");
    println!("  Signal length: {} samples ({:.1} seconds)", n, t[n - 1]);
    println!("  Components: chirp, tone, pulse, noise");

    // Compute spectrogram
    let nperseg = 256;
    let noverlap = 200;

    println!("\nComputing spectrogram with different window functions:");

    // Try different windows
    let windows = [Window::Hann, Window::Hamming, Window::Blackman];
    let window_names = ["Hann", "Hamming", "Blackman"];

    for (i, (&window, &name)) in windows.iter().zip(window_names.iter()).enumerate() {
        println!("\n  Window: {}", name);

        // Compute the spectrogram
        let (frequencies, times, sxx) = spectrogram(
            &signal,
            Some(fs),
            Some(window),
            Some(nperseg),
            Some(noverlap),
            None, // Default NFFT
            None, // No detrending
            Some("psd"),
            None, // Default mode
        )
        .unwrap();

        println!(
            "    Frequency resolution: {:.2} Hz",
            frequencies[1] - frequencies[0]
        );
        println!("    Time resolution: {:.3} seconds", times[1] - times[0]);
        println!("    Number of time frames: {}", times.len());
        println!("    Number of frequency bins: {}", frequencies.len());

        // Compute normalized spectrogram for better visualization
        let (_f, _t, sxx_norm) = spectrogram_normalized(
            &signal,
            Some(fs),
            Some(nperseg),
            Some(noverlap),
            Some(60.0), // 60 dB dynamic range
        )
        .unwrap();

        // Find chirp trajectory
        let mut chirp_trajectory = Vec::new();
        for t_idx in 0..sxx.shape()[1] {
            // Find frequency bin with maximum energy
            let mut max_val = 0.0;
            let mut max_idx = 0;

            for f_idx in 0..sxx.shape()[0] {
                if sxx[[f_idx, t_idx]] > max_val {
                    max_val = sxx[[f_idx, t_idx]];
                    max_idx = f_idx;
                }
            }

            // Only add if it's significantly above noise floor
            if max_val > 0.001 {
                chirp_trajectory.push((times[t_idx], frequencies[max_idx]));
            }
        }

        // Check if the chirp is correctly identified
        if chirp_trajectory.len() > 1 {
            let duration = chirp_trajectory.last().unwrap().0 - chirp_trajectory[0].0;
            let freq_span = chirp_trajectory.last().unwrap().1 - chirp_trajectory[0].1;
            let rate = freq_span / duration;

            println!(
                "    Detected chirp: {:.1} Hz to {:.1} Hz over {:.1} seconds",
                chirp_trajectory[0].1,
                chirp_trajectory.last().unwrap().1,
                duration
            );
            println!(
                "    Estimated chirp rate: {:.1} Hz/s (expected: {:.1})",
                rate, chirp_rate
            );
        }

        // Check tone detection (around 200 Hz, from t=2s to t=4s)
        let mut tone_power = 0.0;
        let mut tone_detected = false;

        for t_idx in 0..times.len() {
            if times[t_idx] >= 2.0 && times[t_idx] <= 4.0 {
                // Find bin closest to 200 Hz
                let bin_200hz = frequencies.iter().position(|&f| f >= 200.0).unwrap_or(0);

                if bin_200hz < sxx.shape()[0] {
                    tone_power += sxx[[bin_200hz, t_idx]];
                    tone_detected = true;
                }
            }
        }

        if tone_detected {
            println!("    Detected 200 Hz tone from t=2s to t=4s");
        }

        // Count number of spectrograms computed
        println!("  Spectrogram {}/{}", i + 1, windows.len());
    }
}

/// Waterfall Plot Example
fn waterfall_plot_example() {
    println!("\n--- Waterfall Plot Example ---");

    // Create a signal with different frequency components appearing over time
    let n = 8000;
    let fs = 1000.0; // 1000 Hz sampling rate
    let dt = 1.0 / fs;

    // Generate time axis
    let t: Vec<f64> = (0..n).map(|i| i as f64 * dt).collect();

    // Create a signal with components that evolve over time
    let mut signal = vec![0.0; n];

    // Add time-varying components
    for i in 0..n {
        // First component: constant frequency at 100 Hz
        signal[i] += (2.0 * PI * 100.0 * t[i]).sin();

        // Second component: sweeping from 150 Hz to 250 Hz from t=2s to t=6s
        if t[i] >= 2.0 && t[i] <= 6.0 {
            let sweep_progress = (t[i] - 2.0) / 4.0; // 0 to 1 over 4 seconds
            let freq = 150.0 + 100.0 * sweep_progress;
            signal[i] += 0.7 * (2.0 * PI * freq * t[i]).sin();
        }

        // Third component: 300 Hz with amplitude modulation
        if t[i] >= 1.0 && t[i] <= 7.0 {
            let mod_rate = 0.5; // Hz (2-second cycle)
            let mod_amount = 0.5 * (1.0 + (2.0 * PI * mod_rate * t[i]).sin());
            signal[i] += mod_amount * (2.0 * PI * 300.0 * t[i]).sin();
        }

        // Fourth component: brief 400 Hz tone from t=4s to t=5s
        if t[i] >= 4.0 && t[i] <= 5.0 {
            signal[i] += 0.8 * (2.0 * PI * 400.0 * t[i]).sin();
        }
    }

    println!("Generating waterfall plot data for time-varying signal:");
    println!("  Signal length: {} samples ({:.1} seconds)", n, t[n - 1]);
    println!("  Components:");
    println!("    - 100 Hz constant tone throughout");
    println!("    - 150-250 Hz sweep from t=2s to t=6s");
    println!("    - 300 Hz amplitude modulated tone");
    println!("    - 400 Hz brief tone at t=4-5s");

    // Generate waterfall plot data
    println!("\nComputing 3D waterfall plot data...");

    let nperseg = 512;
    let noverlap = 384; // 75% overlap

    // Create 3D waterfall data
    let (freqs, times, values) = waterfall_3d(
        &signal,
        Some(fs),
        Some(nperseg),
        Some(noverlap),
        Some(true), // Use log scale
        Some(60.0), // 60 dB dynamic range
    )
    .unwrap();

    println!("  Waterfall data generated:");
    println!(
        "    Frequency range: {:.1}-{:.1} Hz",
        freqs[0],
        freqs[freqs.len() - 1]
    );
    println!(
        "    Time range: {:.1}-{:.1} seconds",
        times[0],
        times[times.len() - 1]
    );
    println!(
        "    Dimensions: {} x {} x {}",
        values.shape()[0],
        values.shape()[1],
        values.shape()[2]
    );

    // Apply a colormap
    let colored_data =
        apply_colormap(&values.slice(ndarray::s![0, .., ..]).to_owned(), "jet").unwrap();

    println!("  Applied 'jet' colormap to data");
    println!(
        "  Waterfall data dimensions: {} x {} x {}",
        colored_data.shape()[0],
        colored_data.shape()[1],
        "3 (RGB)"
    );

    // Check if we can detect all frequency components
    println!("\nAnalyzing frequency components from waterfall data:");

    // For each time slice, find the peak frequencies
    let mut detected_components = Vec::new();

    for t_idx in 0..times.len() {
        let t = times[t_idx];
        let mut slice_peaks = Vec::new();

        // Find local maxima in the frequency dimension
        for f_idx in 1..freqs.len() - 1 {
            let val = values[[0, f_idx, t_idx]];
            if val > values[[0, f_idx - 1, t_idx]] && val > values[[0, f_idx + 1, t_idx]] {
                // Only consider peaks above noise floor
                if val > 0.1 * values.iter().cloned().fold(0.0f64, f64::max) {
                    slice_peaks.push((freqs[f_idx], val));
                }
            }
        }

        // Sort by power
        slice_peaks.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());

        // Take top 4 peaks
        if !slice_peaks.is_empty() {
            detected_components.push((
                t,
                slice_peaks
                    .iter()
                    .take(4)
                    .map(|&(f, _)| f)
                    .collect::<Vec<_>>(),
            ));
        }
    }

    // Report detection of each component
    if !detected_components.is_empty() {
        // Check for 100 Hz component (should be present throughout)
        let found_100hz = detected_components
            .iter()
            .filter(|(_, peaks)| peaks.iter().any(|&f| (f - 100.0).abs() < 10.0))
            .count();

        println!(
            "  100 Hz component detected in {}/{}
 time frames",
            found_100hz,
            detected_components.len()
        );

        // Check for sweep (should be present from t=2s to t=6s)
        let sweep_frames = detected_components
            .iter()
            .filter(|&(t, _)| *t >= 2.0 && *t <= 6.0)
            .collect::<Vec<_>>();

        if !sweep_frames.is_empty() {
            let found_sweep = sweep_frames
                .iter()
                .filter(|(t, peaks)| {
                    let expected_freq = 150.0 + 100.0 * ((*t - 2.0) / 4.0);
                    peaks.iter().any(|&f| (f - expected_freq).abs() < 20.0)
                })
                .count();

            println!(
                "  Sweep component (150-250 Hz) detected in {}/{} relevant frames",
                found_sweep,
                sweep_frames.len()
            );
        }

        // Check for 300 Hz modulated component
        let mod_frames = detected_components
            .iter()
            .filter(|&(t, _)| *t >= 1.0 && *t <= 7.0)
            .collect::<Vec<_>>();

        if !mod_frames.is_empty() {
            let found_mod = mod_frames
                .iter()
                .filter(|(_, peaks)| peaks.iter().any(|&f| (f - 300.0).abs() < 10.0))
                .count();

            println!(
                "  300 Hz modulated component detected in {}/{} relevant frames",
                found_mod,
                mod_frames.len()
            );
        }

        // Check for 400 Hz brief tone
        let brief_frames = detected_components
            .iter()
            .filter(|&(t, _)| *t >= 4.0 && *t <= 5.0)
            .collect::<Vec<_>>();

        if !brief_frames.is_empty() {
            let found_brief = brief_frames
                .iter()
                .filter(|(_, peaks)| peaks.iter().any(|&f| (f - 400.0).abs() < 15.0))
                .count();

            println!(
                "  400 Hz brief tone detected in {}/{} relevant frames",
                found_brief,
                brief_frames.len()
            );
        }
    }

    println!("\nWaterfall plots enable visualization of how frequency");
    println!("content changes over time, which is essential for analyzing");
    println!("non-stationary signals with evolving spectral components.");
}
